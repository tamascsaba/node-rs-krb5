name: CI
env:
  DEBUG: napi:*
  APP_NAME: node-rs-krb5
permissions:
  contents: write
  id-token: write
"on":
  push:
    branches:
      - main
    tags-ignore:
      - "**"
    paths-ignore:
      - "**/*.md"
      - LICENSE
      - "**/*.gitignore"
      - .editorconfig
      - docs/**
  pull_request: null
jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-15-intel
            target: x86_64-apple-darwin
            env:
              PKG_CONFIG_PATH: /usr/local/opt/krb5/lib/pkgconfig
            build: |
              yarn build
              strip -x *.node
          - host: macos-latest
            target: aarch64-apple-darwin
            env:
              PKG_CONFIG_PATH: /opt/homebrew/opt/krb5/lib/pkgconfig
            build: |
              brew info krb5
              yarn build
              strip -x *.node
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            env:
              FOO: bar
            build: |
              choco install mitkerberos --install-arguments="ADDLOCAL=all" || true
              yarn build
          - host: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            env:
              PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig/
            build: |
              sudo apt-get update -qq
              sudo apt-get install -y libkrb5-dev pkg-config
              dpkg -L libkrb5-dev
              set -e && yarn build --target x86_64-unknown-linux-gnu && strip *.node
          - host: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            env:
              PKG_CONFIG_PATH: /usr/lib/aarch64-unknown-linux-gnu/pkgconfig/
            build: |
              sudo apt-get update -qq
              sudo apt-get install -y libkrb5-dev pkg-config
              dpkg -L libkrb5-dev
              set -e && yarn build --target aarch64-unknown-linux-gnu && strip *.node
    name: ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v6
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 22
          check-latest: true
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        if: ${{ !matrix.settings.docker }}
        with:
          toolchain: 1.81.0
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: yarn install
      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: "--user 0:0 -v ${{ github.workspace }}/.cargo-cache/git/db:/usr/local/cargo/git/db -v ${{ github.workspace }}/.cargo/registry/cache:/usr/local/cargo/registry/cache -v ${{ github.workspace }}/.cargo/registry/index:/usr/local/cargo/registry/index -v ${{ github.workspace }}:/build -w /build"
          run: ${{ matrix.settings.build }}
      - name: Build
        run: ${{ matrix.settings.build }}
        env: ${{ matrix.settings.env }}
        if: ${{ !matrix.settings.docker }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: ${{ env.APP_NAME }}.*.node
          if-no-files-found: error
  test-bindings:
    name: Test on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: aarch64-apple-darwin
          - host: macos-15-intel
            target: x86_64-apple-darwin
          - host: windows-latest
            target: x86_64-pc-windows-msvc
          - host: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
          - host: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
        node:
          - "20"
          - "22"
          - "24"
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v6
        with:
          node-version: ${{ matrix.node }}
          check-latest: true
      - name: Install dependencies
        run: yarn install
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: yarn test
  publish:
    name: Publish
    runs-on: ubuntu-22.04
    needs:
      - test-bindings
    steps:
      - uses: actions/checkout@v4
      - name: Setup node
        uses: actions/setup-node@v6
        with:
          node-version: 22
          check-latest: true
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: bindings-*
          merge-multiple: true
      - name: Move artifacts
        run: yarn artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Configure npm
        run: |
          npm config set provenance true
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish packages
        run: |
          set -e

          publish_pkg() {
            local dir=$1
            local tag=$2
            cd "$dir"
            echo "📦 Publishing $(jq -r .name package.json)@$(jq -r .version package.json) (tag: $tag)"
            npm publish --access public --tag "$tag" || echo "⚠️ Skipped already published: $dir"
            cd - >/dev/null
          }

          # Detect tag based on commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MSG" | grep -q "^chore(release):"; then
            TAG="latest"
          elif echo "$COMMIT_MSG" | grep -q "^chore(pre-release):"; then
            TAG="next"
          else
            echo "Not a release, skipping publish"
            exit 0
          fi

          # Publish platform binaries first
          for dir in ./npm/*; do
            [ -f "$dir/package.json" ] && publish_pkg "$dir" "$TAG"
          done

          # Publish main package
          publish_pkg "." "$TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        shell: bash
